#pragma version 10

smart_contracts.agence_staking.contract.AgenceStaking.approval_program:
    intcblock 0 1
    bytecblock 0x75 0x00 "User " 0x001a "MIN_CREATION_FEE" 0x00000000000003e8 "MIN_STAKING_FEE" "governance_account"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.agence_staking.contract.AgenceStaking.__init__() -> void:
__init__:
    proto 0 0
    bytec 4 // "MIN_CREATION_FEE"
    bytec 5 // 0x00000000000003e8
    app_global_put
    bytec 6 // "MIN_STAKING_FEE"
    bytec 5 // 0x00000000000003e8
    app_global_put
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@13
    pushbytess 0x1dba557f 0x28ab102d 0xfa268a10 0x0890bd58 0x813ce89a 0x68266041 0xdf8a11ef 0x4bbde7e0 // method "init(address,uint64)void", method "create_user(string)void", method "get_user(address)(string,uint64,uint64,uint64)", method "stake()void", method "unstake(uint64)void", method "lock_stake(address,uint64)void", method "unlock_stake(address,uint64)void", method "slash_stake(address,uint64,address)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___init_route@2 __puya_arc4_router___create_user_route@3 __puya_arc4_router___get_user_route@4 __puya_arc4_router___stake_route@5 __puya_arc4_router___unstake_route@6 __puya_arc4_router___lock_stake_route@7 __puya_arc4_router___unlock_stake_route@8 __puya_arc4_router___slash_stake_route@9
    intc_0 // 0
    retsub

__puya_arc4_router___init_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub init
    intc_1 // 1
    retsub

__puya_arc4_router___create_user_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub create_user
    intc_1 // 1
    retsub

__puya_arc4_router___get_user_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub get_user
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___stake_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub stake
    intc_1 // 1
    retsub

__puya_arc4_router___unstake_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub unstake
    intc_1 // 1
    retsub

__puya_arc4_router___lock_stake_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub lock_stake
    intc_1 // 1
    retsub

__puya_arc4_router___unlock_stake_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub unlock_stake
    intc_1 // 1
    retsub

__puya_arc4_router___slash_stake_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    callsub slash_stake
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@13:
    intc_0 // 0
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.init(governance_account: bytes, governance_app_id: bytes) -> void:
init:
    proto 2 0
    bytec 7 // "governance_account"
    frame_dig -2
    app_global_put
    frame_dig -1
    btoi
    pushbytes "governance_app"
    swap
    app_global_put
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.create_user(role: bytes) -> void:
create_user:
    proto 1 0
    frame_dig -1
    callsub valid_role
    bytec_1 // 0x00
    !=
    assert // Invalid role
    txn TypeEnum
    intc_1 // pay
    ==
    assert // Invalid transaction type
    txn Amount
    intc_0 // 0
    bytec 4 // "MIN_CREATION_FEE"
    app_global_get_ex
    assert // check self.MIN_CREATION_FEE exists
    btoi
    >=
    assert // Insufficient amount
    bytec_0 // 0x75
    txn Sender
    concat
    box_len
    bury 1
    !
    assert // User already created
    txn Amount
    itob
    pushbytes 0x001a00000000000000000000000000000000
    swap
    concat
    frame_dig -1
    concat
    bytec_0 // 0x75
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    bytec_2 // "User "
    txn Sender
    concat
    pushbytes " created"
    concat
    log
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.valid_role(role: bytes) -> bytes:
valid_role:
    proto 1 1
    frame_dig -1
    pushbytes 0x0003416365
    ==
    bnz valid_role_bool_true@2
    frame_dig -1
    pushbytes 0x00064167656e6379
    ==
    bz valid_role_bool_false@3

valid_role_bool_true@2:
    intc_1 // 1
    b valid_role_bool_merge@4

valid_role_bool_false@3:
    intc_0 // 0

valid_role_bool_merge@4:
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.get_user(user: bytes) -> bytes:
get_user:
    proto 1 1
    bytec_0 // 0x75
    txn Sender
    concat
    box_len
    bury 1
    assert // User not found
    bytec_0 // 0x75
    frame_dig -1
    concat
    box_get
    assert // check self.users entry exists
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.stake() -> void:
stake:
    proto 0 0
    bytec_0 // 0x75
    txn Sender
    concat
    box_len
    bury 1
    assert // User not found
    txn Amount
    intc_0 // 0
    bytec 6 // "MIN_STAKING_FEE"
    app_global_get_ex
    assert // check self.MIN_STAKING_FEE exists
    btoi
    >=
    assert // Insufficient amount
    bytec_0 // 0x75
    txn Sender
    concat
    box_get
    assert // check self.users entry exists
    dup
    extract 18 8 // on error: Index access is out of bounds
    btoi
    txn Amount
    +
    dig 1
    extract 2 8 // on error: Index access is out of bounds
    btoi
    dup2
    -
    dig 3
    intc_0 // 0
    extract_uint16
    dig 4
    len
    uncover 5
    cover 2
    substring3
    txn Amount
    uncover 3
    +
    itob
    uncover 2
    itob
    uncover 3
    itob
    bytec_3 // 0x001a
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    bytec_0 // 0x75
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    bytec_2 // "User "
    txn Sender
    concat
    pushbytes " staked "
    concat
    txn Amount
    itob
    concat
    log
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.unstake(amount: bytes) -> void:
unstake:
    proto 1 0
    bytec_0 // 0x75
    txn Sender
    concat
    box_len
    bury 1
    assert // User not found
    itxn_begin
    global MinTxnFee
    txn Sender
    frame_dig -1
    btoi
    dup
    itxn_field Amount
    swap
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    swap
    itxn_field Fee
    itxn_submit
    bytec_0 // 0x75
    txn Sender
    concat
    box_get
    assert // check self.users entry exists
    dup
    extract 18 8 // on error: Index access is out of bounds
    btoi
    uncover 2
    -
    dig 1
    extract 2 8 // on error: Index access is out of bounds
    btoi
    dup2
    -
    dig 3
    intc_0 // 0
    extract_uint16
    dig 4
    len
    uncover 5
    cover 2
    substring3
    txn Amount
    uncover 3
    +
    itob
    uncover 2
    itob
    uncover 3
    itob
    bytec_3 // 0x001a
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    bytec_0 // 0x75
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    bytec_2 // "User "
    txn Sender
    concat
    pushbytes " unstaked "
    concat
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.lock_stake(user_address: bytes, amount: bytes) -> void:
lock_stake:
    proto 2 0
    callsub only_governance
    bytec_1 // 0x00
    !=
    assert // Only the governance can start a gig
    bytec_0 // 0x75
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // User not found
    dup
    box_get
    assert // check self.users entry exists
    frame_dig -1
    btoi
    dig 1
    extract 10 8 // on error: Index access is out of bounds
    btoi
    dig 1
    >=
    assert // Insufficient available stake
    dig 1
    extract 2 8 // on error: Index access is out of bounds
    btoi
    +
    dig 1
    extract 18 8 // on error: Index access is out of bounds
    dup
    btoi
    dig 2
    -
    dig 3
    intc_0 // 0
    extract_uint16
    dig 4
    len
    uncover 5
    cover 2
    substring3
    uncover 3
    itob
    uncover 2
    itob
    bytec_3 // 0x001a
    uncover 2
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    bytec_2 // "User "
    frame_dig -2
    concat
    pushbytes " locked "
    concat
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.only_governance() -> bytes:
only_governance:
    proto 0 1
    intc_0 // 0
    bytec 7 // "governance_account"
    app_global_get_ex
    assert // check self.governance_account exists
    txn Sender
    ==
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.unlock_stake(user_address: bytes, amount: bytes) -> void:
unlock_stake:
    proto 2 0
    callsub only_governance
    bytec_1 // 0x00
    !=
    assert // Only the governance can start a gig
    bytec_0 // 0x75
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // User not found
    dup
    box_get
    assert // check self.users entry exists
    frame_dig -1
    btoi
    dig 1
    extract 2 8 // on error: Index access is out of bounds
    btoi
    dup2
    <=
    assert // Insufficient locked stake
    swap
    -
    dig 1
    extract 18 8 // on error: Index access is out of bounds
    dup
    btoi
    dig 2
    -
    dig 3
    intc_0 // 0
    extract_uint16
    dig 4
    len
    uncover 5
    cover 2
    substring3
    uncover 3
    itob
    uncover 2
    itob
    bytec_3 // 0x001a
    uncover 2
    concat
    swap
    concat
    uncover 2
    concat
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    bytec_2 // "User "
    frame_dig -2
    concat
    pushbytes " unlocked "
    concat
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.agence_staking.contract.AgenceStaking.slash_stake(offender_address: bytes, amount: bytes, proposer_address: bytes) -> void:
slash_stake:
    proto 3 0
    callsub only_governance
    bytec_1 // 0x00
    !=
    assert // Only the governance can start a gig
    bytec_0 // 0x75
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    assert // User not found
    dup
    box_get
    assert // check self.users entry exists
    frame_dig -2
    btoi
    dig 1
    extract 2 8 // on error: Index access is out of bounds
    btoi
    dup2
    <=
    assert // Insufficient locked stake
    itxn_begin
    global MinTxnFee
    dig 2
    itxn_field Amount
    frame_dig -1
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    dig 2
    extract 18 8 // on error: Index access is out of bounds
    btoi
    dig 2
    -
    swap
    uncover 2
    -
    dup2
    -
    dig 3
    intc_0 // 0
    extract_uint16
    dig 4
    len
    uncover 5
    cover 2
    substring3
    uncover 2
    itob
    uncover 2
    itob
    uncover 3
    itob
    bytec_3 // 0x001a
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    pushbytes "Offender "
    frame_dig -3
    concat
    pushbytes " slashed "
    concat
    frame_dig -2
    concat
    log
    pushbytes "Proposer "
    frame_dig -1
    concat
    pushbytes " received "
    concat
    frame_dig -2
    concat
    log
    retsub
