{
    "hints": {
        "init(address,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_user(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_user(address)(string,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "User",
                    "elements": [
                        [
                            "role",
                            "string"
                        ],
                        [
                            "locked_stake",
                            "uint64"
                        ],
                        [
                            "available_stake",
                            "uint64"
                        ],
                        [
                            "total_stake",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stake()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unstake(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "lock_stake(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unlock_stake(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "slash_stake(address,uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlX3N0YWtpbmcuY29udHJhY3QuQWdlbmNlU3Rha2luZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "MIN_CREATION_FEE": {
                    "type": "bytes",
                    "key": "MIN_CREATION_FEE"
                },
                "MIN_STAKING_FEE": {
                    "type": "bytes",
                    "key": "MIN_STAKING_FEE"
                },
                "governance_account": {
                    "type": "bytes",
                    "key": "governance_account"
                },
                "governance_app": {
                    "type": "uint64",
                    "key": "governance_app"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AgenceStaking",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "address",
                        "name": "governance_account"
                    },
                    {
                        "type": "uint64",
                        "name": "governance_app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_user",
                "args": [
                    {
                        "type": "string",
                        "name": "role"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_user",
                "args": [
                    {
                        "type": "address",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(string,uint64,uint64,uint64)"
                }
            },
            {
                "name": "stake",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "unstake",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "lock_stake",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "unlock_stake",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "slash_stake",
                "args": [
                    {
                        "type": "address",
                        "name": "offender_address"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "address",
                        "name": "proposer_address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}