{
    "hints": {
        "init(address,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_gig(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "start_gig(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_gig(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_gigs()(address,address,string,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_gig_by_address(address)(address,address,string,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_gig(uint64)(address,address,string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Gig",
                    "elements": [
                        [
                            "ace",
                            "address"
                        ],
                        [
                            "agency",
                            "address"
                        ],
                        [
                            "status",
                            "string"
                        ],
                        [
                            "binding_amount",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlX2dpZ3MuY29udHJhY3QuQWdlbmNlR2lncy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "gigs": {
                    "type": "bytes",
                    "key": "gigs"
                },
                "governance_account": {
                    "type": "bytes",
                    "key": "governance_account"
                },
                "governance_app": {
                    "type": "uint64",
                    "key": "governance_app"
                },
                "governance_app_id": {
                    "type": "uint64",
                    "key": "governance_app_id"
                },
                "next_gig_id": {
                    "type": "bytes",
                    "key": "next_gig_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AgenceGigs",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "address",
                        "name": "governance_account"
                    },
                    {
                        "type": "uint64",
                        "name": "governance_app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_gig",
                "args": [
                    {
                        "type": "address",
                        "name": "agency"
                    },
                    {
                        "type": "uint64",
                        "name": "binding_amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "start_gig",
                "args": [
                    {
                        "type": "uint64",
                        "name": "gig_id"
                    },
                    {
                        "type": "address",
                        "name": "selected_ace"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_gig",
                "args": [
                    {
                        "type": "uint64",
                        "name": "gig_id"
                    },
                    {
                        "type": "string",
                        "name": "status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_gigs",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,address,string,uint64)[]"
                }
            },
            {
                "name": "get_gig_by_address",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,address,string,uint64)[]"
                }
            },
            {
                "name": "get_gig",
                "args": [
                    {
                        "type": "uint64",
                        "name": "gig_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,address,string,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}