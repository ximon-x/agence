#pragma version 10

smart_contracts.agence_governance.contract.AgenceGovernance.approval_program:
    intcblock 0 1 6
    bytecblock 0x0000000000002710 "staking_app" "USER_CREATION_FEE" "staking_account" "User " "MIN_STAKING"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.agence_governance.contract.AgenceGovernance.__init__() -> void:
__init__:
    proto 0 0
    pushbytes "PROPOSAL_CREATION_FEE"
    bytec_0 // 0x0000000000002710
    app_global_put
    bytec_2 // "USER_CREATION_FEE"
    bytec_0 // 0x0000000000002710
    app_global_put
    pushbytes "GIG_CREATION_FEE"
    bytec_0 // 0x0000000000002710
    app_global_put
    bytec 5 // "MIN_STAKING"
    bytec_0 // 0x0000000000002710
    app_global_put
    pushbytess "next_proposal_id" 0x0000000000000000 // "next_proposal_id", 0x0000000000000000
    app_global_put
    pushbytess "proposals" 0x0000 // "proposals", 0x0000
    app_global_put
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@9
    pushbytess 0xbb6dfe45 0x78afca44 0xbd6099e5 0x92e03b1c 0xb7355fd1 // method "init(address,uint64,address,uint64)void", method "create_proposal(address,address,string,string,uint64)void", method "register(string)void", method "deposit()void", method "withdraw()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___init_route@2 __puya_arc4_router___create_proposal_route@3 __puya_arc4_router___register_route@4 __puya_arc4_router___deposit_route@5 __puya_arc4_router___withdraw_route@6
    intc_0 // 0
    retsub

__puya_arc4_router___init_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    callsub init
    intc_1 // 1
    retsub

__puya_arc4_router___create_proposal_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    intc_1 // 1
    retsub

__puya_arc4_router___register_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub register
    intc_1 // 1
    retsub

__puya_arc4_router___deposit_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub deposit
    intc_1 // 1
    retsub

__puya_arc4_router___withdraw_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub withdraw
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@9:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@13
    txn ApplicationID
    !
    assert // is creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@13:
    intc_0 // 0
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.init(staking_account: bytes, staking_app_id: bytes, gigs_account: bytes, gigs_app_id: bytes) -> void:
init:
    proto 4 0
    callsub only_creator
    pushbytes 0x00
    !=
    assert // Only the creator can init the contract
    bytec_3 // "staking_account"
    frame_dig -4
    app_global_put
    frame_dig -3
    btoi
    bytec_1 // "staking_app"
    swap
    app_global_put
    pushbytes "gigs_account"
    frame_dig -2
    app_global_put
    frame_dig -1
    btoi
    pushbytes "gigs_app"
    swap
    app_global_put
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.only_creator() -> bytes:
only_creator:
    proto 0 1
    global CreatorAddress
    txn Sender
    ==
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.register(role: bytes) -> void:
register:
    proto 1 0
    txn Amount
    intc_0 // 0
    bytec_2 // "USER_CREATION_FEE"
    app_global_get_ex
    assert // check self.USER_CREATION_FEE exists
    btoi
    >=
    assert // Insufficient funds
    txn Amount
    intc_0 // 0
    bytec_2 // "USER_CREATION_FEE"
    app_global_get_ex
    assert // check self.USER_CREATION_FEE exists
    btoi
    -
    txn Sender
    itxn_begin
    global MinTxnFee
    intc_0 // 0
    bytec_3 // "staking_account"
    app_global_get_ex
    assert // check self.staking_account exists
    dig 3
    itxn_field Amount
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    itxn_begin
    global MinTxnFee
    uncover 2
    itob
    intc_0 // 0
    bytec_1 // "staking_app"
    app_global_get_ex
    assert // check self.staking_app exists
    itxn_field ApplicationID
    pushbytes 0xb4162408 // method "create_user(address,uint64,string)void"
    itxn_field ApplicationArgs
    dig 2
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    bytec 4 // "User "
    swap
    concat
    pushbytes " registered"
    concat
    log
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.deposit() -> void:
deposit:
    proto 0 0
    txn Amount
    intc_0 // 0
    bytec 5 // "MIN_STAKING"
    app_global_get_ex
    assert // check self.MIN_STAKING exists
    btoi
    >=
    assert // Not Enough funds
    itxn_begin
    global MinTxnFee
    intc_0 // 0
    bytec_3 // "staking_account"
    app_global_get_ex
    assert // check self.staking_account exists
    txn Amount
    itxn_field Amount
    itxn_field Receiver
    intc_1 // pay
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    itxn_begin
    global MinTxnFee
    txn Sender
    txn Amount
    itob
    intc_0 // 0
    bytec_1 // "staking_app"
    app_global_get_ex
    assert // check self.staking_app exists
    itxn_field ApplicationID
    pushbytes 0xf55b31ac // method "stake(address,uint64)void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    bytec 4 // "User "
    txn Sender
    concat
    pushbytes " staked"
    concat
    txn Amount
    itob
    concat
    log
    retsub


// smart_contracts.agence_governance.contract.AgenceGovernance.withdraw() -> void:
withdraw:
    proto 0 0
    itxn_begin
    global MinTxnFee
    txn Sender
    txn Amount
    itob
    intc_0 // 0
    bytec_1 // "staking_app"
    app_global_get_ex
    assert // check self.staking_app exists
    itxn_field ApplicationID
    pushbytes 0x79fa871e // method "unstake(address,uint64)void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    bytec 4 // "User "
    txn Sender
    concat
    pushbytes " unstaked"
    concat
    txn Amount
    itob
    concat
    log
    retsub
