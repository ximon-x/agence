/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "init(address,uint64,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_proposal(address,address,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlX2dvdmVybmFuY2UuY29udHJhY3QuQWdlbmNlR292ZXJuYW5jZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "GIG_CREATION_FEE": {
          "type": "bytes",
          "key": "GIG_CREATION_FEE"
        },
        "MIN_STAKING": {
          "type": "bytes",
          "key": "MIN_STAKING"
        },
        "PROPOSAL_CREATION_FEE": {
          "type": "bytes",
          "key": "PROPOSAL_CREATION_FEE"
        },
        "USER_CREATION_FEE": {
          "type": "bytes",
          "key": "USER_CREATION_FEE"
        },
        "gigs_account": {
          "type": "bytes",
          "key": "gigs_account"
        },
        "gigs_app": {
          "type": "uint64",
          "key": "gigs_app"
        },
        "next_proposal_id": {
          "type": "bytes",
          "key": "next_proposal_id"
        },
        "proposals": {
          "type": "bytes",
          "key": "proposals"
        },
        "staking_account": {
          "type": "bytes",
          "key": "staking_account"
        },
        "staking_app": {
          "type": "uint64",
          "key": "staking_app"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "AgenceGovernance",
    "methods": [
      {
        "name": "init",
        "args": [
          {
            "type": "address",
            "name": "staking_account"
          },
          {
            "type": "uint64",
            "name": "staking_app_id"
          },
          {
            "type": "address",
            "name": "gigs_account"
          },
          {
            "type": "uint64",
            "name": "gigs_app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_proposal",
        "args": [
          {
            "type": "address",
            "name": "proposer"
          },
          {
            "type": "address",
            "name": "offender"
          },
          {
            "type": "string",
            "name": "kind"
          },
          {
            "type": "string",
            "name": "metadata"
          },
          {
            "type": "uint64",
            "name": "end_time"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register",
        "args": [
          {
            "type": "string",
            "name": "role"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deposit",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the AgenceGovernance smart contract.
 */
export type AgenceGovernance = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(address,uint64,address,uint64)void' | 'init', {
      argsObj: {
        stakingAccount: string
        stakingAppId: bigint | number
        gigsAccount: string
        gigsAppId: bigint | number
      }
      argsTuple: [stakingAccount: string, stakingAppId: bigint | number, gigsAccount: string, gigsAppId: bigint | number]
      returns: void
    }>
    & Record<'create_proposal(address,address,string,string,uint64)void' | 'create_proposal', {
      argsObj: {
        proposer: string
        offender: string
        kind: string
        metadata: string
        endTime: bigint | number
      }
      argsTuple: [proposer: string, offender: string, kind: string, metadata: string, endTime: bigint | number]
      returns: void
    }>
    & Record<'register(string)void' | 'register', {
      argsObj: {
        role: string
      }
      argsTuple: [role: string]
      returns: void
    }>
    & Record<'deposit()void' | 'deposit', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdraw()void' | 'withdraw', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      gigCreationFee?: BinaryState
      minStaking?: BinaryState
      proposalCreationFee?: BinaryState
      userCreationFee?: BinaryState
      gigsAccount?: BinaryState
      gigsApp?: IntegerState
      nextProposalId?: BinaryState
      proposals?: BinaryState
      stakingAccount?: BinaryState
      stakingApp?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AgenceGovernanceSig = keyof AgenceGovernance['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AgenceGovernanceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AgenceGovernance smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AgenceGovernanceSig> = AgenceGovernance['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AgenceGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AgenceGovernanceSig> = AgenceGovernance['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AgenceGovernanceCreateCalls = (typeof AgenceGovernanceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AgenceGovernanceCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AgenceGovernanceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AgenceGovernanceCreateCalls) => AgenceGovernanceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AgenceGovernanceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AgenceGovernance smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the init(address,uint64,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static init(args: MethodArgs<'init(address,uint64,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'init(address,uint64,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakingAccount, args.stakingAppId, args.gigsAccount, args.gigsAppId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_proposal(address,address,string,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProposal(args: MethodArgs<'create_proposal(address,address,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_proposal(address,address,string,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposer, args.offender, args.kind, args.metadata, args.endTime],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.role],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AgenceGovernance smart contract
 */
export class AgenceGovernanceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AgenceGovernanceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AgenceGovernance['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AgenceGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AgenceGovernanceDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AgenceGovernanceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AgenceGovernance smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AgenceGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the init(address,uint64,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public init(args: MethodArgs<'init(address,uint64,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGovernanceCallFactory.init(args, params))
  }

  /**
   * Calls the create_proposal(address,address,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProposal(args: MethodArgs<'create_proposal(address,address,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGovernanceCallFactory.createProposal(args, params))
  }

  /**
   * Calls the register(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGovernanceCallFactory.register(args, params))
  }

  /**
   * Calls the deposit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deposit(args: MethodArgs<'deposit()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGovernanceCallFactory.deposit(args, params))
  }

  /**
   * Calls the withdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGovernanceCallFactory.withdraw(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AgenceGovernance['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get gigCreationFee() {
        return AgenceGovernanceClient.getBinaryState(state, 'GIG_CREATION_FEE')
      },
      get minStaking() {
        return AgenceGovernanceClient.getBinaryState(state, 'MIN_STAKING')
      },
      get proposalCreationFee() {
        return AgenceGovernanceClient.getBinaryState(state, 'PROPOSAL_CREATION_FEE')
      },
      get userCreationFee() {
        return AgenceGovernanceClient.getBinaryState(state, 'USER_CREATION_FEE')
      },
      get gigsAccount() {
        return AgenceGovernanceClient.getBinaryState(state, 'gigs_account')
      },
      get gigsApp() {
        return AgenceGovernanceClient.getIntegerState(state, 'gigs_app')
      },
      get nextProposalId() {
        return AgenceGovernanceClient.getBinaryState(state, 'next_proposal_id')
      },
      get proposals() {
        return AgenceGovernanceClient.getBinaryState(state, 'proposals')
      },
      get stakingAccount() {
        return AgenceGovernanceClient.getBinaryState(state, 'staking_account')
      },
      get stakingApp() {
        return AgenceGovernanceClient.getIntegerState(state, 'staking_app')
      },
    }
  }

  public compose(): AgenceGovernanceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      init(args: MethodArgs<'init(address,uint64,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.init(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createProposal(args: MethodArgs<'create_proposal(address,address,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      register(args: MethodArgs<'register(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AgenceGovernanceComposer
  }
}
export type AgenceGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(address,uint64,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(args: MethodArgs<'init(address,uint64,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, MethodReturn<'init(address,uint64,address,uint64)void'>]>

  /**
   * Calls the create_proposal(address,address,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(args: MethodArgs<'create_proposal(address,address,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, MethodReturn<'create_proposal(address,address,string,string,uint64)void'>]>

  /**
   * Calls the register(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, MethodReturn<'register(string)void'>]>

  /**
   * Calls the deposit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, MethodReturn<'deposit()void'>]>

  /**
   * Calls the withdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, MethodReturn<'withdraw()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AgenceGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AgenceGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AgenceGovernanceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AgenceGovernanceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AgenceGovernanceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AgenceGovernanceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
