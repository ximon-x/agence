/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "init(address,uint64,address,uint64,address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "get_governance_account()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_staking_account()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_gigs_account()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_governance_app()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_staking_app()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_gigs_app()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlLmNvbnRyYWN0LkFnZW5jZS5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDAgMQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1ICJnb3Zlcm5hbmNlX2FjY291bnQiICJnb3ZlcmFuY2VfYXBwIiAic3Rha2luZ19hY2NvdW50IiAic3Rha2luZ19hcHAiICJnaWdzX2FjY291bnQiICJnaWdzX2FwcCIKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hZ2VuY2UuY29udHJhY3QuQWdlbmNlLl9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIHByb3RvIDAgMQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHB1c2hieXRlc3MgMHhlOWNlYjE4ZiAweDJmN2NiZDY0IDB4ZjI5YTcwYjIgMHg3ZWY2OTRlZSAweDVkZjUxM2FjIDB4NmFiZjY1MDUgMHhlMDE2MWM1MCAvLyBtZXRob2QgImluaXQoYWRkcmVzcyx1aW50NjQsYWRkcmVzcyx1aW50NjQsYWRkcmVzcyx1aW50NjQpdm9pZCIsIG1ldGhvZCAiZ2V0X2dvdmVybmFuY2VfYWNjb3VudCgpYWRkcmVzcyIsIG1ldGhvZCAiZ2V0X3N0YWtpbmdfYWNjb3VudCgpYWRkcmVzcyIsIG1ldGhvZCAiZ2V0X2dpZ3NfYWNjb3VudCgpYWRkcmVzcyIsIG1ldGhvZCAiZ2V0X2dvdmVybmFuY2VfYXBwKCl1aW50NjQiLCBtZXRob2QgImdldF9zdGFraW5nX2FwcCgpdWludDY0IiwgbWV0aG9kICJnZXRfZ2lnc19hcHAoKXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2luaXRfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfZ292ZXJuYW5jZV9hY2NvdW50X3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fZ2V0X3N0YWtpbmdfYWNjb3VudF9yb3V0ZUA0IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9naWdzX2FjY291bnRfcm91dGVANSBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfZ292ZXJuYW5jZV9hcHBfcm91dGVANiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfc3Rha2luZ19hcHBfcm91dGVANyBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfZ2lnc19hcHBfcm91dGVAOAogICAgaW50Y18wIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19faW5pdF9yb3V0ZUAyOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA2CiAgICBjYWxsc3ViIGluaXQKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9nb3Zlcm5hbmNlX2FjY291bnRfcm91dGVAMzoKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X2dvdmVybmFuY2VfYWNjb3VudAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fZ2V0X3N0YWtpbmdfYWNjb3VudF9yb3V0ZUA0OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfc3Rha2luZ19hY2NvdW50CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfZ2lnc19hY2NvdW50X3JvdXRlQDU6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldF9naWdzX2FjY291bnQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9nb3Zlcm5hbmNlX2FwcF9yb3V0ZUA2OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfZ292ZXJuYW5jZV9hcHAKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9zdGFraW5nX2FwcF9yb3V0ZUA3OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfc3Rha2luZ19hcHAKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9naWdzX2FwcF9yb3V0ZUA4OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfZ2lnc19hcHAKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmFnZW5jZS5jb250cmFjdC5BZ2VuY2UuaW5pdChnb3Zlcm5hbmNlX2FjY291bnQ6IGJ5dGVzLCBnb3Zlcm5hbmNlX2FwcF9pZDogYnl0ZXMsIHN0YWtpbmdfYWNjb3VudDogYnl0ZXMsIHN0YWtpbmdfYXBwX2lkOiBieXRlcywgZ2lnc19hY2NvdW50OiBieXRlcywgZ2lnc19hcHBfaWQ6IGJ5dGVzKSAtPiB2b2lkOgppbml0OgogICAgcHJvdG8gNiAwCiAgICBieXRlY18xIC8vICJnb3Zlcm5hbmNlX2FjY291bnQiCiAgICBmcmFtZV9kaWcgLTYKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBmcmFtZV9kaWcgLTUKICAgIGJ0b2kKICAgIGJ5dGVjXzIgLy8gImdvdmVyYW5jZV9hcHAiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYnl0ZWNfMyAvLyAic3Rha2luZ19hY2NvdW50IgogICAgZnJhbWVfZGlnIC00CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBieXRlYyA0IC8vICJzdGFraW5nX2FwcCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBieXRlYyA1IC8vICJnaWdzX2FjY291bnQiCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGJ5dGVjIDYgLy8gImdpZ3NfYXBwIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hZ2VuY2UuY29udHJhY3QuQWdlbmNlLmdldF9nb3Zlcm5hbmNlX2FjY291bnQoKSAtPiBieXRlczoKZ2V0X2dvdmVybmFuY2VfYWNjb3VudDoKICAgIHByb3RvIDAgMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImdvdmVybmFuY2VfYWNjb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nb3Zlcm5hbmNlX2FjY291bnQgZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYWdlbmNlLmNvbnRyYWN0LkFnZW5jZS5nZXRfc3Rha2luZ19hY2NvdW50KCkgLT4gYnl0ZXM6CmdldF9zdGFraW5nX2FjY291bnQ6CiAgICBwcm90byAwIDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJzdGFraW5nX2FjY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3Rha2luZ19hY2NvdW50IGV4aXN0cwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmFnZW5jZS5jb250cmFjdC5BZ2VuY2UuZ2V0X2dpZ3NfYWNjb3VudCgpIC0+IGJ5dGVzOgpnZXRfZ2lnc19hY2NvdW50OgogICAgcHJvdG8gMCAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAiZ2lnc19hY2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdpZ3NfYWNjb3VudCBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5hZ2VuY2UuY29udHJhY3QuQWdlbmNlLmdldF9nb3Zlcm5hbmNlX2FwcCgpIC0+IGJ5dGVzOgpnZXRfZ292ZXJuYW5jZV9hcHA6CiAgICBwcm90byAwIDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJnb3ZlcmFuY2VfYXBwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdvdmVyYW5jZV9hcHAgZXhpc3RzCiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYWdlbmNlLmNvbnRyYWN0LkFnZW5jZS5nZXRfc3Rha2luZ19hcHAoKSAtPiBieXRlczoKZ2V0X3N0YWtpbmdfYXBwOgogICAgcHJvdG8gMCAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAic3Rha2luZ19hcHAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3Rha2luZ19hcHAgZXhpc3RzCiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuYWdlbmNlLmNvbnRyYWN0LkFnZW5jZS5nZXRfZ2lnc19hcHAoKSAtPiBieXRlczoKZ2V0X2dpZ3NfYXBwOgogICAgcHJvdG8gMCAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAiZ2lnc19hcHAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2lnc19hcHAgZXhpc3RzCiAgICBpdG9iCiAgICByZXRzdWIK",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlLmNvbnRyYWN0LkFnZW5jZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "gigs_account": {
          "type": "bytes",
          "key": "gigs_account"
        },
        "gigs_app": {
          "type": "uint64",
          "key": "gigs_app"
        },
        "goverance_app": {
          "type": "uint64",
          "key": "goverance_app"
        },
        "governance_account": {
          "type": "bytes",
          "key": "governance_account"
        },
        "staking_account": {
          "type": "bytes",
          "key": "staking_account"
        },
        "staking_app": {
          "type": "uint64",
          "key": "staking_app"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Agence",
    "methods": [
      {
        "name": "init",
        "args": [
          {
            "type": "address",
            "name": "governance_account"
          },
          {
            "type": "uint64",
            "name": "governance_app_id"
          },
          {
            "type": "address",
            "name": "staking_account"
          },
          {
            "type": "uint64",
            "name": "staking_app_id"
          },
          {
            "type": "address",
            "name": "gigs_account"
          },
          {
            "type": "uint64",
            "name": "gigs_app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_governance_account",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "get_staking_account",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "get_gigs_account",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "get_governance_app",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_staking_app",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_gigs_app",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Agence smart contract.
 */
export type Agence = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(address,uint64,address,uint64,address,uint64)void' | 'init', {
      argsObj: {
        governanceAccount: string
        governanceAppId: bigint | number
        stakingAccount: string
        stakingAppId: bigint | number
        gigsAccount: string
        gigsAppId: bigint | number
      }
      argsTuple: [governanceAccount: string, governanceAppId: bigint | number, stakingAccount: string, stakingAppId: bigint | number, gigsAccount: string, gigsAppId: bigint | number]
      returns: void
    }>
    & Record<'get_governance_account()address' | 'get_governance_account', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'get_staking_account()address' | 'get_staking_account', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'get_gigs_account()address' | 'get_gigs_account', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'get_governance_app()uint64' | 'get_governance_app', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_staking_app()uint64' | 'get_staking_app', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_gigs_app()uint64' | 'get_gigs_app', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      gigsAccount?: BinaryState
      gigsApp?: IntegerState
      goveranceApp?: IntegerState
      governanceAccount?: BinaryState
      stakingAccount?: BinaryState
      stakingApp?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AgenceSig = keyof Agence['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AgenceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Agence smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AgenceSig> = Agence['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Agence smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AgenceSig> = Agence['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AgenceCreateCalls = (typeof AgenceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AgenceCreateCallParams =
  | (TypedCallParams<'init(address,uint64,address,uint64,address,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AgenceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AgenceCreateCalls) => AgenceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AgenceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Agence smart contract using the init(address,uint64,address,uint64,address,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      init(args: MethodArgs<'init(address,uint64,address,uint64,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'init(address,uint64,address,uint64,address,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.governanceAccount, args.governanceAppId, args.stakingAccount, args.stakingAppId, args.gigsAccount, args.gigsAppId],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_governance_account()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGovernanceAccount(args: MethodArgs<'get_governance_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_governance_account()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_staking_account()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStakingAccount(args: MethodArgs<'get_staking_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_staking_account()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_gigs_account()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGigsAccount(args: MethodArgs<'get_gigs_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_gigs_account()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_governance_app()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGovernanceApp(args: MethodArgs<'get_governance_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_governance_app()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_staking_app()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStakingApp(args: MethodArgs<'get_staking_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_staking_app()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_gigs_app()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGigsApp(args: MethodArgs<'get_gigs_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_gigs_app()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Agence smart contract
 */
export class AgenceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AgenceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Agence['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Agence smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AgenceDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AgenceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Agence smart contract using the init(address,uint64,address,uint64,address,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async init(args: MethodArgs<'init(address,uint64,address,uint64,address,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'init(address,uint64,address,uint64,address,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(AgenceCallFactory.create.init(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Agence smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_governance_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGovernanceAccount(args: MethodArgs<'get_governance_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getGovernanceAccount(args, params))
  }

  /**
   * Calls the get_staking_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStakingAccount(args: MethodArgs<'get_staking_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getStakingAccount(args, params))
  }

  /**
   * Calls the get_gigs_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGigsAccount(args: MethodArgs<'get_gigs_account()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getGigsAccount(args, params))
  }

  /**
   * Calls the get_governance_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGovernanceApp(args: MethodArgs<'get_governance_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getGovernanceApp(args, params))
  }

  /**
   * Calls the get_staking_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStakingApp(args: MethodArgs<'get_staking_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getStakingApp(args, params))
  }

  /**
   * Calls the get_gigs_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGigsApp(args: MethodArgs<'get_gigs_app()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceCallFactory.getGigsApp(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Agence['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get gigsAccount() {
        return AgenceClient.getBinaryState(state, 'gigs_account')
      },
      get gigsApp() {
        return AgenceClient.getIntegerState(state, 'gigs_app')
      },
      get goveranceApp() {
        return AgenceClient.getIntegerState(state, 'goverance_app')
      },
      get governanceAccount() {
        return AgenceClient.getBinaryState(state, 'governance_account')
      },
      get stakingAccount() {
        return AgenceClient.getBinaryState(state, 'staking_account')
      },
      get stakingApp() {
        return AgenceClient.getIntegerState(state, 'staking_app')
      },
    }
  }

  public compose(): AgenceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getGovernanceAccount(args: MethodArgs<'get_governance_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGovernanceAccount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStakingAccount(args: MethodArgs<'get_staking_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStakingAccount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGigsAccount(args: MethodArgs<'get_gigs_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGigsAccount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGovernanceApp(args: MethodArgs<'get_governance_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGovernanceApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStakingApp(args: MethodArgs<'get_staking_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStakingApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGigsApp(args: MethodArgs<'get_gigs_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGigsApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AgenceComposer
  }
}
export type AgenceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_governance_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGovernanceAccount(args: MethodArgs<'get_governance_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_governance_account()address'>]>

  /**
   * Calls the get_staking_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakingAccount(args: MethodArgs<'get_staking_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_staking_account()address'>]>

  /**
   * Calls the get_gigs_account()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGigsAccount(args: MethodArgs<'get_gigs_account()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_gigs_account()address'>]>

  /**
   * Calls the get_governance_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGovernanceApp(args: MethodArgs<'get_governance_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_governance_app()uint64'>]>

  /**
   * Calls the get_staking_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakingApp(args: MethodArgs<'get_staking_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_staking_app()uint64'>]>

  /**
   * Calls the get_gigs_app()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGigsApp(args: MethodArgs<'get_gigs_app()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, MethodReturn<'get_gigs_app()uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the Agence smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AgenceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AgenceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AgenceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AgenceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AgenceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
