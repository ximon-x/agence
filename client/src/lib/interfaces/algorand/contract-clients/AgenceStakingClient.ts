/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "init(address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "create_user(address,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_user(address)(string,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "User",
          "elements": [
            [
              "role",
              "string"
            ],
            [
              "locked_stake",
              "uint64"
            ],
            [
              "available_stake",
              "uint64"
            ],
            [
              "total_stake",
              "uint64"
            ]
          ]
        }
      }
    },
    "stake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "lock_stake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unlock_stake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "slash_stake(address,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlX3N0YWtpbmcuY29udHJhY3QuQWdlbmNlU3Rha2luZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "governance_account": {
          "type": "bytes",
          "key": "governance_account"
        },
        "governance_app": {
          "type": "uint64",
          "key": "governance_app"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "AgenceStaking",
    "methods": [
      {
        "name": "init",
        "args": [
          {
            "type": "address",
            "name": "governance_account"
          },
          {
            "type": "uint64",
            "name": "governance_app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_user",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "string",
            "name": "role"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_user",
        "args": [
          {
            "type": "address",
            "name": "user"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(string,uint64,uint64,uint64)"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "lock_stake",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unlock_stake",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "slash_stake",
        "args": [
          {
            "type": "address",
            "name": "offender_address"
          },
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "address",
            "name": "proposer_address"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the AgenceStaking smart contract.
 */
export type AgenceStaking = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(address,uint64)void' | 'init', {
      argsObj: {
        governanceAccount: string
        governanceAppId: bigint | number
      }
      argsTuple: [governanceAccount: string, governanceAppId: bigint | number]
      returns: void
    }>
    & Record<'create_user(address,uint64,string)void' | 'create_user', {
      argsObj: {
        userAddress: string
        amount: bigint | number
        role: string
      }
      argsTuple: [userAddress: string, amount: bigint | number, role: string]
      returns: void
    }>
    & Record<'get_user(address)(string,uint64,uint64,uint64)' | 'get_user', {
      argsObj: {
        user: string
      }
      argsTuple: [user: string]
      returns: User
    }>
    & Record<'stake(address,uint64)void' | 'stake', {
      argsObj: {
        userAddress: string
        amount: bigint | number
      }
      argsTuple: [userAddress: string, amount: bigint | number]
      returns: void
    }>
    & Record<'unstake(address,uint64)void' | 'unstake', {
      argsObj: {
        userAddress: string
        amount: bigint | number
      }
      argsTuple: [userAddress: string, amount: bigint | number]
      returns: void
    }>
    & Record<'lock_stake(address,uint64)void' | 'lock_stake', {
      argsObj: {
        userAddress: string
        amount: bigint | number
      }
      argsTuple: [userAddress: string, amount: bigint | number]
      returns: void
    }>
    & Record<'unlock_stake(address,uint64)void' | 'unlock_stake', {
      argsObj: {
        userAddress: string
        amount: bigint | number
      }
      argsTuple: [userAddress: string, amount: bigint | number]
      returns: void
    }>
    & Record<'slash_stake(address,uint64,address)void' | 'slash_stake', {
      argsObj: {
        offenderAddress: string
        amount: bigint | number
        proposerAddress: string
      }
      argsTuple: [offenderAddress: string, amount: bigint | number, proposerAddress: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      governanceAccount?: BinaryState
      governanceApp?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AgenceStakingSig = keyof AgenceStaking['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AgenceStakingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a User result as a struct
 */
export type User = {
  role: string
  lockedStake: bigint
  availableStake: bigint
  totalStake: bigint
}
/**
 * Converts the tuple representation of a User to the struct representation
 */
export function User([role, lockedStake, availableStake, totalStake]: [string, bigint, bigint, bigint] ) {
  return {
    role,
    lockedStake,
    availableStake,
    totalStake,
  }
}
/**
 * Maps a method signature from the AgenceStaking smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AgenceStakingSig> = AgenceStaking['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AgenceStaking smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AgenceStakingSig> = AgenceStaking['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AgenceStakingCreateCalls = (typeof AgenceStakingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AgenceStakingCreateCallParams =
  | (TypedCallParams<'init(address,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AgenceStakingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AgenceStakingCreateCalls) => AgenceStakingCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AgenceStakingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AgenceStaking smart contract using the init(address,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      init(args: MethodArgs<'init(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'init(address,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.governanceAccount, args.governanceAppId],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_user(address,uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createUser(args: MethodArgs<'create_user(address,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_user(address,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.amount, args.role],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_user(address)(string,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getUser(args: MethodArgs<'get_user(address)(string,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_user(address)(string,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.user],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unstake(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unstake(args: MethodArgs<'unstake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unstake(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the lock_stake(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lockStake(args: MethodArgs<'lock_stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'lock_stake(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unlock_stake(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unlockStake(args: MethodArgs<'unlock_stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unlock_stake(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the slash_stake(address,uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static slashStake(args: MethodArgs<'slash_stake(address,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'slash_stake(address,uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.offenderAddress, args.amount, args.proposerAddress],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AgenceStaking smart contract
 */
export class AgenceStakingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AgenceStakingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AgenceStaking['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AgenceStaking smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AgenceStakingDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AgenceStakingCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AgenceStaking smart contract using the init(address,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async init(args: MethodArgs<'init(address,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'init(address,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(AgenceStakingCallFactory.create.init(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AgenceStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create_user(address,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createUser(args: MethodArgs<'create_user(address,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.createUser(args, params))
  }

  /**
   * Calls the get_user(address)(string,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getUser(args: MethodArgs<'get_user(address)(string,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.getUser(args, params), User)
  }

  /**
   * Calls the stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.stake(args, params))
  }

  /**
   * Calls the unstake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unstake(args: MethodArgs<'unstake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.unstake(args, params))
  }

  /**
   * Calls the lock_stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lockStake(args: MethodArgs<'lock_stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.lockStake(args, params))
  }

  /**
   * Calls the unlock_stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unlockStake(args: MethodArgs<'unlock_stake(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.unlockStake(args, params))
  }

  /**
   * Calls the slash_stake(address,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public slashStake(args: MethodArgs<'slash_stake(address,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceStakingCallFactory.slashStake(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AgenceStaking['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get governanceAccount() {
        return AgenceStakingClient.getBinaryState(state, 'governance_account')
      },
      get governanceApp() {
        return AgenceStakingClient.getIntegerState(state, 'governance_app')
      },
    }
  }

  public compose(): AgenceStakingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createUser(args: MethodArgs<'create_user(address,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createUser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getUser(args: MethodArgs<'get_user(address)(string,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getUser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(User)
        return this
      },
      stake(args: MethodArgs<'stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unstake(args: MethodArgs<'unstake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      lockStake(args: MethodArgs<'lock_stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.lockStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unlockStake(args: MethodArgs<'unlock_stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unlockStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      slashStake(args: MethodArgs<'slash_stake(address,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.slashStake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AgenceStakingComposer
  }
}
export type AgenceStakingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_user(address,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createUser(args: MethodArgs<'create_user(address,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'create_user(address,uint64,string)void'>]>

  /**
   * Calls the get_user(address)(string,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUser(args: MethodArgs<'get_user(address)(string,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'get_user(address)(string,uint64,uint64,uint64)'>]>

  /**
   * Calls the stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'stake(address,uint64)void'>]>

  /**
   * Calls the unstake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(args: MethodArgs<'unstake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'unstake(address,uint64)void'>]>

  /**
   * Calls the lock_stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lockStake(args: MethodArgs<'lock_stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'lock_stake(address,uint64)void'>]>

  /**
   * Calls the unlock_stake(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unlockStake(args: MethodArgs<'unlock_stake(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'unlock_stake(address,uint64)void'>]>

  /**
   * Calls the slash_stake(address,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashStake(args: MethodArgs<'slash_stake(address,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, MethodReturn<'slash_stake(address,uint64,address)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AgenceStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceStakingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AgenceStakingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AgenceStakingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AgenceStakingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AgenceStakingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AgenceStakingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
