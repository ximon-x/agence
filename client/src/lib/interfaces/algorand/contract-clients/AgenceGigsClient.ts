/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "init(address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "create_gig(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "start_gig(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_gig(uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_gigs()(address,address,string,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_gig_by_address(address)(address,address,string,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_gig(uint64)(address,address,string,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Gig",
          "elements": [
            [
              "ace",
              "address"
            ],
            [
              "agency",
              "address"
            ],
            [
              "status",
              "string"
            ],
            [
              "binding_amount",
              "uint64"
            ]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYWdlbmNlX2dpZ3MuY29udHJhY3QuQWdlbmNlR2lncy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "gigs": {
          "type": "bytes",
          "key": "gigs"
        },
        "governance_account": {
          "type": "bytes",
          "key": "governance_account"
        },
        "governance_app": {
          "type": "uint64",
          "key": "governance_app"
        },
        "governance_app_id": {
          "type": "uint64",
          "key": "governance_app_id"
        },
        "next_gig_id": {
          "type": "bytes",
          "key": "next_gig_id"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "AgenceGigs",
    "methods": [
      {
        "name": "init",
        "args": [
          {
            "type": "address",
            "name": "governance_account"
          },
          {
            "type": "uint64",
            "name": "governance_app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_gig",
        "args": [
          {
            "type": "address",
            "name": "agency"
          },
          {
            "type": "uint64",
            "name": "binding_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "start_gig",
        "args": [
          {
            "type": "uint64",
            "name": "gig_id"
          },
          {
            "type": "address",
            "name": "selected_ace"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_gig",
        "args": [
          {
            "type": "uint64",
            "name": "gig_id"
          },
          {
            "type": "string",
            "name": "status"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_gigs",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(address,address,string,uint64)[]"
        }
      },
      {
        "name": "get_gig_by_address",
        "args": [
          {
            "type": "address",
            "name": "user_address"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,address,string,uint64)[]"
        }
      },
      {
        "name": "get_gig",
        "args": [
          {
            "type": "uint64",
            "name": "gig_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,address,string,uint64)"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the AgenceGigs smart contract.
 */
export type AgenceGigs = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(address,uint64)void' | 'init', {
      argsObj: {
        governanceAccount: string
        governanceAppId: bigint | number
      }
      argsTuple: [governanceAccount: string, governanceAppId: bigint | number]
      returns: void
    }>
    & Record<'create_gig(address,uint64)void' | 'create_gig', {
      argsObj: {
        agency: string
        bindingAmount: bigint | number
      }
      argsTuple: [agency: string, bindingAmount: bigint | number]
      returns: void
    }>
    & Record<'start_gig(uint64,address)void' | 'start_gig', {
      argsObj: {
        gigId: bigint | number
        selectedAce: string
      }
      argsTuple: [gigId: bigint | number, selectedAce: string]
      returns: void
    }>
    & Record<'update_gig(uint64,string)void' | 'update_gig', {
      argsObj: {
        gigId: bigint | number
        status: string
      }
      argsTuple: [gigId: bigint | number, status: string]
      returns: void
    }>
    & Record<'get_gigs()(address,address,string,uint64)[]' | 'get_gigs', {
      argsObj: {
      }
      argsTuple: []
      returns: [string, string, string, bigint][]
    }>
    & Record<'get_gig_by_address(address)(address,address,string,uint64)[]' | 'get_gig_by_address', {
      argsObj: {
        userAddress: string
      }
      argsTuple: [userAddress: string]
      returns: [string, string, string, bigint][]
    }>
    & Record<'get_gig(uint64)(address,address,string,uint64)' | 'get_gig', {
      argsObj: {
        gigId: bigint | number
      }
      argsTuple: [gigId: bigint | number]
      returns: Gig
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      gigs?: BinaryState
      governanceAccount?: BinaryState
      governanceApp?: IntegerState
      governanceAppId?: IntegerState
      nextGigId?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AgenceGigsSig = keyof AgenceGigs['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AgenceGigsSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Gig result as a struct
 */
export type Gig = {
  ace: string
  agency: string
  status: string
  bindingAmount: bigint
}
/**
 * Converts the tuple representation of a Gig to the struct representation
 */
export function Gig([ace, agency, status, bindingAmount]: [string, string, string, bigint] ) {
  return {
    ace,
    agency,
    status,
    bindingAmount,
  }
}
/**
 * Maps a method signature from the AgenceGigs smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AgenceGigsSig> = AgenceGigs['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AgenceGigs smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AgenceGigsSig> = AgenceGigs['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AgenceGigsCreateCalls = (typeof AgenceGigsCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AgenceGigsCreateCallParams =
  | (TypedCallParams<'init(address,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AgenceGigsDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AgenceGigsCreateCalls) => AgenceGigsCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AgenceGigsCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AgenceGigs smart contract using the init(address,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      init(args: MethodArgs<'init(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'init(address,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.governanceAccount, args.governanceAppId],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_gig(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createGig(args: MethodArgs<'create_gig(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_gig(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.agency, args.bindingAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the start_gig(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startGig(args: MethodArgs<'start_gig(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'start_gig(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.gigId, args.selectedAce],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_gig(uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateGig(args: MethodArgs<'update_gig(uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_gig(uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.gigId, args.status],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_gigs()(address,address,string,uint64)[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGigs(args: MethodArgs<'get_gigs()(address,address,string,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_gigs()(address,address,string,uint64)[]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_gig_by_address(address)(address,address,string,uint64)[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGigByAddress(args: MethodArgs<'get_gig_by_address(address)(address,address,string,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_gig_by_address(address)(address,address,string,uint64)[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_gig(uint64)(address,address,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getGig(args: MethodArgs<'get_gig(uint64)(address,address,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_gig(uint64)(address,address,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.gigId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AgenceGigs smart contract
 */
export class AgenceGigsClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AgenceGigsClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AgenceGigs['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AgenceGigs smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AgenceGigsDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AgenceGigsCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AgenceGigs smart contract using the init(address,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async init(args: MethodArgs<'init(address,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'init(address,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(AgenceGigsCallFactory.create.init(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AgenceGigs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create_gig(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createGig(args: MethodArgs<'create_gig(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.createGig(args, params))
  }

  /**
   * Calls the start_gig(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startGig(args: MethodArgs<'start_gig(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.startGig(args, params))
  }

  /**
   * Calls the update_gig(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateGig(args: MethodArgs<'update_gig(uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.updateGig(args, params))
  }

  /**
   * Calls the get_gigs()(address,address,string,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGigs(args: MethodArgs<'get_gigs()(address,address,string,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.getGigs(args, params))
  }

  /**
   * Calls the get_gig_by_address(address)(address,address,string,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGigByAddress(args: MethodArgs<'get_gig_by_address(address)(address,address,string,uint64)[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.getGigByAddress(args, params))
  }

  /**
   * Calls the get_gig(uint64)(address,address,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getGig(args: MethodArgs<'get_gig(uint64)(address,address,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AgenceGigsCallFactory.getGig(args, params), Gig)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AgenceGigs['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get gigs() {
        return AgenceGigsClient.getBinaryState(state, 'gigs')
      },
      get governanceAccount() {
        return AgenceGigsClient.getBinaryState(state, 'governance_account')
      },
      get governanceApp() {
        return AgenceGigsClient.getIntegerState(state, 'governance_app')
      },
      get governanceAppId() {
        return AgenceGigsClient.getIntegerState(state, 'governance_app_id')
      },
      get nextGigId() {
        return AgenceGigsClient.getBinaryState(state, 'next_gig_id')
      },
    }
  }

  public compose(): AgenceGigsComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createGig(args: MethodArgs<'create_gig(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createGig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startGig(args: MethodArgs<'start_gig(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startGig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateGig(args: MethodArgs<'update_gig(uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateGig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGigs(args: MethodArgs<'get_gigs()(address,address,string,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGigs(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGigByAddress(args: MethodArgs<'get_gig_by_address(address)(address,address,string,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGigByAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getGig(args: MethodArgs<'get_gig(uint64)(address,address,string,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getGig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Gig)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AgenceGigsComposer
  }
}
export type AgenceGigsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_gig(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGig(args: MethodArgs<'create_gig(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'create_gig(address,uint64)void'>]>

  /**
   * Calls the start_gig(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGig(args: MethodArgs<'start_gig(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'start_gig(uint64,address)void'>]>

  /**
   * Calls the update_gig(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateGig(args: MethodArgs<'update_gig(uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'update_gig(uint64,string)void'>]>

  /**
   * Calls the get_gigs()(address,address,string,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGigs(args: MethodArgs<'get_gigs()(address,address,string,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'get_gigs()(address,address,string,uint64)[]'>]>

  /**
   * Calls the get_gig_by_address(address)(address,address,string,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGigByAddress(args: MethodArgs<'get_gig_by_address(address)(address,address,string,uint64)[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'get_gig_by_address(address)(address,address,string,uint64)[]'>]>

  /**
   * Calls the get_gig(uint64)(address,address,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGig(args: MethodArgs<'get_gig(uint64)(address,address,string,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, MethodReturn<'get_gig(uint64)(address,address,string,uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the AgenceGigs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AgenceGigsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AgenceGigsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AgenceGigsComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AgenceGigsComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AgenceGigsComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AgenceGigsComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
