{
  "version": 3,
  "sources": [
    "../../agence_staking/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAAA;AASK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AATL;;;AAAA;;;AASK;;;AAAA;AAAA;AAaA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;;;AAAA;;;AAsBK;;;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAuCK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;AAAA;AAAA;AAAA;;AAAA;AAhDL;;;AAAA;;;AAgDK;;;AAAA;AAAA;AAqBA;;AAAA;AAAA;AAAA;;AAAA;AArEL;;;AAAA;;;AAqEK;;;AAAA;AAAA;AA4BA;;AAAA;AAAA;AAAA;;AAAA;AAjGL;;;AAAA;;;AAiGK;;;AAAA;AAAA;AAyBA;;AAAA;AAAA;AAAA;;AAAA;AA1HL;;;AAAA;;;AA0HK;;;AAAA;AAAA;AAuBA;;AAAA;AAAA;AAAA;;AAAA;AAjJL;;;AAAA;;;AAAA;;;AAiJK;;;AAAA;AAAA;AAjJL;AAAA;AASA;;;AAMQ;;AAAA;;AAAA;AACkC;;AAAA;AAAlC;;;;;;;;;;;;;;;;AAAA;AAAA;;AAMR;;;AAGY;;;AAAA;AAAA;AADJ;AAGO;;AAAA;;;AAAA;AAAA;AAAP;AACkC;AAA3B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEqB;;AAAA;AAAP;AAIoB;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;AAAA;AAAlC;;AAAA;;AAAA;AAGa;AAAA;;AAAA;AAAc;;;;;;;;;;AAAA;AAA3B;;AAgJR;;;AAEoB;AAAA;;AAAA;AAAA;AAA2B;;AAA3B;AAAL;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAEoB;;AAAQ;;;;;;;AAAR;AAAA;;;AAAiB;;AAAQ;;;;;;;;;;AAAR;AAAjB;;;;;;;;AAAL;AAAA;AAAA;;AAAA;AAAP;AApJR;;;AAE8B;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAMR;;;AAGY;;;AAAA;AAAA;AADJ;AAG8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AAEW;AAAA;;;AAAA;AAA0B;;AAAA;AAA5C;AAAA;;AAAkB;AACsB;;AAAA;;;AAAA;AAAxC;AAAsB;AAGb;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACe;;AAAA;;AAAA;AAAP;AACG;;AAAA;AACJ;;AAAA;AAJkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlC;;AAAA;;AAAA;AAOa;AAAA;;AAAA;AAAc;;;;;;;;;;AAAA;AAAY;;AAAA;AAAvC;;AAER;;;AAGY;;;AAAA;AAAA;AADJ;AAG8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AACA;;AAAA;AAAiB;;AAAA;;;AAAA;AAAjB;;AAAA;AAAP;AAEA;AAGQ;;;;;;;;;;AAHR;;;;;AAAA;AAMkB;;AAAA;;;AAAA;AAAlB;;AAAkB;AACsB;;AAAA;;;AAAA;AAAxC;AAAsB;AAGb;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACe;;AAAA;;AAAA;AAAP;AACG;;AAAA;AACJ;;AAAA;AAJkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlC;;AAAA;;AAAA;AAOa;AAAA;;AAAA;AAAc;;;;;;;;;;;;AAAA;AAAc;;AAAA;AAAzC;;AAER;;;AAGY;;;AAAA;AAAA;AADJ;AAG8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AAGH;;AAAA;AAAiB;;AAAA;;;AAAA;AAAjB;;AAAA;AADJ;AAImB;;AAAA;;;AAAA;AAAA;AACG;;AAAA;;;AAAA;AAAA;AAAtB;;AAAsB;AAGb;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACQ;;AAAA;AACG;;AAAA;AAHc;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAlC;;AAAA;;AAAA;AAOa;AAAA;;AAAA;AAAc;;;;;;;;;;AAAA;AAAY;;AAAA;AAAvC;;AAER;;;AAGY;;;AAAA;AAAA;AADJ;AAG8B;AAAvB;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AAEA;;AAAA;AAAiB;;AAAA;;;AAAA;AAAjB;AAAA;AAAP;AAEA;AAAmB;AACG;;AAAA;;;AAAA;AAAA;AAAtB;;AAAsB;AAGb;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACQ;;AAAA;AACG;;AAAA;AAHc;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAlC;;AAAA;;AAAA;AAOa;AAAA;;AAAA;AAAc;;;;;;;;;;;;AAAA;AAAc;;AAAA;AAAzC;;AAER;;;AAKY;;;AAAA;AAAA;AADJ;AAGkC;AAA3B;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEO;AAAA;AAAA;AACA;;AAAA;AAAiB;;AAAA;;;AAAA;AAAjB;AAAA;AAAP;AAEA;AAGQ;;;;;;;;;;AAHR;;;;;AAAA;AAMkB;;AAAA;;;AAAA;AAAlB;;AAAkB;AAClB;AAAA;;AAAmB;AACnB;AAAsB;AAGb;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AACQ;;AAAA;AACG;;AAAA;AACJ;;AAAA;AAJsB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtC;;AAAA;;AAAA;AAOiB;;;;;;;;;;;AAAA;;AAAA;AAAkB;;;;;;;;;;;AAAA;AAAa;;AAAA;AAAhD;AACiB;;;;;;;;;;;AAAA;;AAAA;AAAkB;;;;;;;;;;;;AAAA;AAAc;;AAAA;AAAjD;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.approval_program",
      "params": {},
      "block": "smart_contracts.agence_staking.contract.AgenceStaking.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x00 0x75 \"User \" 0x001a \"governance_account\""
    },
    "39": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "42": {
      "op": "return",
      "stack_out": []
    },
    "43": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "46": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "bz __puya_arc4_router___after_if_else@13",
      "stack_out": []
    },
    "51": {
      "op": "pushbytess 0x1dba557f 0xb4162408 0xfa268a10 0xf55b31ac 0x79fa871e 0x68266041 0xdf8a11ef 0x4bbde7e0 // method \"init(address,uint64)void\", method \"create_user(address,uint64,string)void\", method \"get_user(address)(string,uint64,uint64,uint64)\", method \"stake(address,uint64)void\", method \"unstake(address,uint64)void\", method \"lock_stake(address,uint64)void\", method \"unlock_stake(address,uint64)void\", method \"slash_stake(address,uint64,address)void\""
    },
    "93": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_user(address,uint64,string)void)",
        "Method(get_user(address)(string,uint64,uint64,uint64))",
        "Method(init(address,uint64)void)",
        "Method(lock_stake(address,uint64)void)",
        "Method(slash_stake(address,uint64,address)void)",
        "Method(stake(address,uint64)void)",
        "Method(unlock_stake(address,uint64)void)",
        "Method(unstake(address,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(init(address,uint64)void)",
        "Method(create_user(address,uint64,string)void)",
        "Method(get_user(address)(string,uint64,uint64,uint64))",
        "Method(stake(address,uint64)void)",
        "Method(unstake(address,uint64)void)",
        "Method(lock_stake(address,uint64)void)",
        "Method(unlock_stake(address,uint64)void)",
        "Method(slash_stake(address,uint64,address)void)",
        "tmp%2#0"
      ]
    },
    "96": {
      "op": "match __puya_arc4_router___init_route@2 __puya_arc4_router___create_user_route@3 __puya_arc4_router___get_user_route@4 __puya_arc4_router___stake_route@5 __puya_arc4_router___unstake_route@6 __puya_arc4_router___lock_stake_route@7 __puya_arc4_router___unlock_stake_route@8 __puya_arc4_router___slash_stake_route@9",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "115": {
      "retsub": true,
      "op": "retsub"
    },
    "116": {
      "block": "__puya_arc4_router___init_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "118": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "119": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "122": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "123": {
      "op": "assert // is creating",
      "stack_out": []
    },
    "124": {
      "op": "txna ApplicationArgs 1"
    },
    "127": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "130": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.init",
      "op": "callsub init",
      "stack_out": []
    },
    "133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "134": {
      "retsub": true,
      "op": "retsub"
    },
    "135": {
      "block": "__puya_arc4_router___create_user_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "138": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "141": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "142": {
      "op": "txna ApplicationArgs 1"
    },
    "145": {
      "op": "txna ApplicationArgs 2"
    },
    "148": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "151": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.create_user",
      "op": "callsub create_user",
      "stack_out": []
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "155": {
      "retsub": true,
      "op": "retsub"
    },
    "156": {
      "block": "__puya_arc4_router___get_user_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "159": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "160": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "162": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "163": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.get_user",
      "op": "callsub get_user",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "169": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": []
    },
    "178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "179": {
      "retsub": true,
      "op": "retsub"
    },
    "180": {
      "block": "__puya_arc4_router___stake_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "183": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "186": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "187": {
      "op": "txna ApplicationArgs 1"
    },
    "190": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "193": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.stake",
      "op": "callsub stake",
      "stack_out": []
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "retsub": true,
      "op": "retsub"
    },
    "198": {
      "block": "__puya_arc4_router___unstake_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "201": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "204": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "205": {
      "op": "txna ApplicationArgs 1"
    },
    "208": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "211": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.unstake",
      "op": "callsub unstake",
      "stack_out": []
    },
    "214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "215": {
      "retsub": true,
      "op": "retsub"
    },
    "216": {
      "block": "__puya_arc4_router___lock_stake_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "219": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "222": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "223": {
      "op": "txna ApplicationArgs 1"
    },
    "226": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "229": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.lock_stake",
      "op": "callsub lock_stake",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "233": {
      "retsub": true,
      "op": "retsub"
    },
    "234": {
      "block": "__puya_arc4_router___unlock_stake_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "237": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "240": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 1"
    },
    "244": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%46#0"
      ]
    },
    "247": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.unlock_stake",
      "op": "callsub unlock_stake",
      "stack_out": []
    },
    "250": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "251": {
      "retsub": true,
      "op": "retsub"
    },
    "252": {
      "block": "__puya_arc4_router___slash_stake_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "254": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "255": {
      "op": "assert // OnCompletion is NoOp",
      "stack_out": []
    },
    "256": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "258": {
      "op": "assert // is not creating",
      "stack_out": []
    },
    "259": {
      "op": "txna ApplicationArgs 1"
    },
    "262": {
      "op": "txna ApplicationArgs 2"
    },
    "265": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "268": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.slash_stake",
      "op": "callsub slash_stake",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    },
    "273": {
      "block": "__puya_arc4_router___after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.init",
      "params": {
        "governance_account#0": "bytes",
        "governance_app_id#0": "bytes"
      },
      "block": "init",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "278": {
      "op": "bytec 4 // \"governance_account\"",
      "defined_out": [
        "\"governance_account\""
      ],
      "stack_out": [
        "\"governance_account\""
      ]
    },
    "280": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"governance_account\"",
        "governance_account#0 (copy)"
      ],
      "stack_out": [
        "\"governance_account\"",
        "governance_account#0 (copy)"
      ]
    },
    "282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "283": {
      "op": "frame_dig -1",
      "defined_out": [
        "governance_app_id#0 (copy)"
      ],
      "stack_out": [
        "governance_app_id#0 (copy)"
      ]
    },
    "285": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "286": {
      "op": "pushbytes \"governance_app\"",
      "defined_out": [
        "\"governance_app\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"governance_app\""
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "\"governance_app\"",
        "new_state_value%0#0"
      ]
    },
    "303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "304": {
      "retsub": true,
      "op": "retsub"
    },
    "305": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.create_user",
      "params": {
        "user_address#0": "bytes",
        "amount#0": "bytes",
        "role#0": "bytes"
      },
      "block": "create_user",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "308": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "312": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "313": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "314": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "316": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.valid_role",
      "op": "callsub valid_role",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "319": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%2#0",
        "0x00"
      ]
    },
    "320": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "321": {
      "op": "assert // Invalid role",
      "stack_out": []
    },
    "322": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "323": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x75",
        "user_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user_address#0 (copy)"
      ]
    },
    "325": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "326": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "327": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "328": {
      "op": "bury 1",
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%0#0"
      ]
    },
    "330": {
      "op": "!",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "331": {
      "op": "assert // User already created",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "332": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "amount#0 (copy)"
      ]
    },
    "334": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "335": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "total_stake#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "total_stake#0"
      ]
    },
    "336": {
      "op": "pushbytes 0x001a00000000000000000000000000000000",
      "defined_out": [
        "0x001a00000000000000000000000000000000",
        "tmp%4#0",
        "total_stake#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "total_stake#0",
        "0x001a00000000000000000000000000000000"
      ]
    },
    "356": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "0x001a00000000000000000000000000000000",
        "total_stake#0"
      ]
    },
    "357": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "358": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%4#0",
        "role#0 (copy)"
      ]
    },
    "360": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "361": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%4#0 (copy)"
      ]
    },
    "363": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "364": {
      "op": "pop",
      "stack_out": [
        "tmp%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "365": {
      "op": "box_put",
      "stack_out": []
    },
    "366": {
      "op": "bytec_2 // \"User \"",
      "defined_out": [
        "\"User \""
      ],
      "stack_out": [
        "\"User \""
      ]
    },
    "367": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"User \"",
        "user_address#0 (copy)"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "370": {
      "op": "pushbytes \" created\"",
      "defined_out": [
        "\" created\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\" created\""
      ]
    },
    "380": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "381": {
      "op": "log",
      "stack_out": []
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "params": {},
      "block": "only_governance",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "387": {
      "op": "bytec 4 // \"governance_account\"",
      "defined_out": [
        "\"governance_account\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"governance_account\""
      ]
    },
    "389": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "390": {
      "op": "assert // check self.governance_account exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "391": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "394": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "396": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "398": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.valid_role",
      "params": {
        "role#0": "bytes"
      },
      "block": "valid_role",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "403": {
      "op": "frame_dig -1",
      "defined_out": [
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "405": {
      "op": "pushbytes 0x0003416365",
      "defined_out": [
        "0x0003416365",
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)",
        "0x0003416365"
      ]
    },
    "412": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "413": {
      "op": "bnz valid_role_bool_true@2",
      "stack_out": []
    },
    "416": {
      "op": "frame_dig -1",
      "stack_out": [
        "role#0 (copy)"
      ]
    },
    "418": {
      "op": "pushbytes 0x00064167656e6379",
      "defined_out": [
        "0x00064167656e6379",
        "role#0 (copy)"
      ],
      "stack_out": [
        "role#0 (copy)",
        "0x00064167656e6379"
      ]
    },
    "428": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "429": {
      "op": "bz valid_role_bool_false@3",
      "stack_out": []
    },
    "432": {
      "block": "valid_role_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "433": {
      "op": "b valid_role_bool_merge@4"
    },
    "436": {
      "block": "valid_role_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "437": {
      "block": "valid_role_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "or_result%0#0",
        "0x00"
      ]
    },
    "438": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "or_result%0#0",
        "0x00",
        "0"
      ]
    },
    "439": {
      "op": "uncover 2",
      "defined_out": [
        "0",
        "0x00",
        "or_result%0#0"
      ],
      "stack_out": [
        "0x00",
        "0",
        "or_result%0#0"
      ]
    },
    "441": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "442": {
      "retsub": true,
      "op": "retsub"
    },
    "443": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.get_user",
      "params": {
        "user#0": "bytes"
      },
      "block": "get_user",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "446": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "447": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x75",
        "user#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user#0 (copy)"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "450": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "451": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "452": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "454": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "455": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "456": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "457": {
      "retsub": true,
      "op": "retsub"
    },
    "458": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.stake",
      "params": {
        "user_address#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "stake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "461": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "465": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "466": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "467": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "468": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x75",
        "user_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user_address#0 (copy)"
      ]
    },
    "470": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "471": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "472": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "473": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "475": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "476": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "477": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "maybe_exists%1#0"
      ]
    },
    "478": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "tmp%2#0",
        "user#0"
      ]
    },
    "479": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "480": {
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "483": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%5#0"
      ]
    },
    "484": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "486": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "488": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%6#0 (copy)"
      ]
    },
    "490": {
      "op": "+",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0"
      ]
    },
    "491": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "user#0 (copy)"
      ]
    },
    "493": {
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%7#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%7#0"
      ]
    },
    "496": {
      "op": "btoi",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0"
      ]
    },
    "497": {
      "op": "dup2",
      "defined_out": [
        "new_total_stake#0",
        "new_total_stake#0 (copy)",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_total_stake#0 (copy)",
        "tmp%8#0 (copy)"
      ]
    },
    "498": {
      "op": "-",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0"
      ]
    },
    "499": {
      "op": "dig 4",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "user#0 (copy)"
      ]
    },
    "501": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "502": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "item_start_offset%0#0"
      ]
    },
    "503": {
      "op": "dig 5",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "user#0 (copy)"
      ]
    },
    "505": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "506": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "user#0"
      ]
    },
    "508": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "user#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "510": {
      "op": "substring3",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "new_total_stake#0",
        "tmp%8#0",
        "new_available_stake#0",
        "tmp%9#0"
      ]
    },
    "511": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%6#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "513": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%6#0"
      ]
    },
    "515": {
      "op": "+",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%9#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%9#0",
        "to_encode%0#0"
      ]
    },
    "516": {
      "op": "itob",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "517": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "new_available_stake#0"
      ]
    },
    "519": {
      "op": "itob",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "520": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "new_total_stake#0"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "523": {
      "op": "bytec_3 // 0x001a",
      "defined_out": [
        "0x001a",
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a"
      ]
    },
    "524": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a",
        "val_as_bytes%0#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "527": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "531": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "534": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0 (copy)"
      ]
    },
    "536": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "537": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "538": {
      "op": "box_put",
      "stack_out": []
    },
    "539": {
      "op": "bytec_2 // \"User \"",
      "defined_out": [
        "\"User \""
      ],
      "stack_out": [
        "\"User \""
      ]
    },
    "540": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"User \"",
        "user_address#0 (copy)"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "543": {
      "op": "pushbytes \" staked \"",
      "defined_out": [
        "\" staked \"",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "\" staked \""
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "554": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%17#0",
        "amount#0 (copy)"
      ]
    },
    "556": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "557": {
      "op": "log",
      "stack_out": []
    },
    "558": {
      "retsub": true,
      "op": "retsub"
    },
    "559": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.unstake",
      "params": {
        "user_address#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "unstake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "562": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "565": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "566": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "567": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "568": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "569": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x75",
        "user_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user_address#0 (copy)"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "573": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "574": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "576": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "577": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "578": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "maybe_exists%1#0"
      ]
    },
    "579": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "tmp%2#0",
        "user#0"
      ]
    },
    "580": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "amount#0 (copy)"
      ]
    },
    "582": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "583": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "585": {
      "op": "extract 10 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "588": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "589": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)"
      ]
    },
    "591": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "592": {
      "op": "assert // Insufficient locked stake",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "593": {
      "op": "itxn_begin"
    },
    "594": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "596": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "598": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "600": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "user_address#0 (copy)"
      ]
    },
    "602": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "604": {
      "op": "intc_1 // pay",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay"
      ]
    },
    "605": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "607": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "609": {
      "op": "itxn_submit"
    },
    "610": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "612": {
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "615": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%9#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%9#0"
      ]
    },
    "616": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%9#0",
        "tmp%4#0 (copy)"
      ]
    },
    "618": {
      "op": "-",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0"
      ]
    },
    "619": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "user#0 (copy)"
      ]
    },
    "621": {
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "new_total_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%11#0"
      ]
    },
    "624": {
      "op": "btoi",
      "defined_out": [
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0"
      ]
    },
    "625": {
      "op": "dup2",
      "defined_out": [
        "new_total_stake#0",
        "new_total_stake#0 (copy)",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_total_stake#0 (copy)",
        "tmp%12#0 (copy)"
      ]
    },
    "626": {
      "op": "-",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0"
      ]
    },
    "627": {
      "op": "dig 4",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "user#0 (copy)"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "630": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "item_start_offset%0#0"
      ]
    },
    "631": {
      "op": "dig 5",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "user#0 (copy)"
      ]
    },
    "633": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "634": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "user#0"
      ]
    },
    "636": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "user#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "638": {
      "op": "substring3",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%12#0",
        "new_available_stake#0",
        "tmp%13#0"
      ]
    },
    "639": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%13#0",
        "tmp%12#0"
      ]
    },
    "641": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%13#0",
        "tmp%12#0",
        "tmp%4#0"
      ]
    },
    "643": {
      "op": "+",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%13#0",
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%13#0",
        "to_encode%0#0"
      ]
    },
    "644": {
      "op": "itob",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ]
    },
    "645": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "new_available_stake#0"
      ]
    },
    "647": {
      "op": "itob",
      "defined_out": [
        "new_total_stake#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "648": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "new_total_stake#0"
      ]
    },
    "650": {
      "op": "itob",
      "defined_out": [
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "651": {
      "op": "bytec_3 // 0x001a",
      "defined_out": [
        "0x001a",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a"
      ]
    },
    "652": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a",
        "val_as_bytes%0#0"
      ]
    },
    "654": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "655": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "660": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ]
    },
    "661": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "662": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0 (copy)"
      ]
    },
    "664": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "665": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "666": {
      "op": "box_put",
      "stack_out": []
    },
    "667": {
      "op": "bytec_2 // \"User \"",
      "defined_out": [
        "\"User \""
      ],
      "stack_out": [
        "\"User \""
      ]
    },
    "668": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"User \"",
        "user_address#0 (copy)"
      ]
    },
    "670": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "671": {
      "op": "pushbytes \" unstaked \"",
      "defined_out": [
        "\" unstaked \"",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "\" unstaked \""
      ]
    },
    "683": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "684": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%21#0",
        "amount#0 (copy)"
      ]
    },
    "686": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "687": {
      "op": "log",
      "stack_out": []
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    },
    "689": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.lock_stake",
      "params": {
        "user_address#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "lock_stake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "692": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "695": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "696": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "697": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "698": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "699": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x75",
        "user_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user_address#0 (copy)"
      ]
    },
    "701": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "702": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "703": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "704": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "706": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "707": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "708": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "maybe_exists%1#0"
      ]
    },
    "709": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "tmp%2#0",
        "user#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "amount#0 (copy)"
      ]
    },
    "712": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "713": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "715": {
      "op": "extract 10 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "718": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "719": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)"
      ]
    },
    "721": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "722": {
      "op": "assert // Insufficient available stake",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "723": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "725": {
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "728": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%9#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%9#0"
      ]
    },
    "729": {
      "op": "+",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0"
      ]
    },
    "730": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "user#0 (copy)"
      ]
    },
    "732": {
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0"
      ]
    },
    "735": {
      "op": "dup",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "736": {
      "op": "btoi",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "737": {
      "op": "dig 2",
      "defined_out": [
        "new_locked_stake#0",
        "new_locked_stake#0 (copy)",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0",
        "new_locked_stake#0 (copy)"
      ]
    },
    "739": {
      "op": "-",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0"
      ]
    },
    "740": {
      "op": "dig 3",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0 (copy)"
      ]
    },
    "742": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "743": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0"
      ]
    },
    "744": {
      "op": "dig 4",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "user#0 (copy)"
      ]
    },
    "746": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "747": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "user#0"
      ]
    },
    "749": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "751": {
      "op": "substring3",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0"
      ]
    },
    "752": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0",
        "new_locked_stake#0"
      ]
    },
    "754": {
      "op": "itob",
      "defined_out": [
        "new_available_stake#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ]
    },
    "755": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "new_available_stake#0"
      ]
    },
    "757": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "758": {
      "op": "bytec_3 // 0x001a",
      "defined_out": [
        "0x001a",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0x001a"
      ]
    },
    "759": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "0x001a",
        "val_as_bytes%0#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "764": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0",
        "tmp%11#0"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "767": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "769": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0 (copy)"
      ]
    },
    "771": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "772": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "773": {
      "op": "box_put",
      "stack_out": []
    },
    "774": {
      "op": "bytec_2 // \"User \"",
      "defined_out": [
        "\"User \""
      ],
      "stack_out": [
        "\"User \""
      ]
    },
    "775": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"User \"",
        "user_address#0 (copy)"
      ]
    },
    "777": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "778": {
      "op": "pushbytes \" locked \"",
      "defined_out": [
        "\" locked \"",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "\" locked \""
      ]
    },
    "788": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "789": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "amount#0 (copy)"
      ]
    },
    "791": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "792": {
      "op": "log",
      "stack_out": []
    },
    "793": {
      "retsub": true,
      "op": "retsub"
    },
    "794": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.unlock_stake",
      "params": {
        "user_address#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "unlock_stake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "797": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "801": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "802": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "803": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "804": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x75",
        "user_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "user_address#0 (copy)"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "807": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "808": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "809": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "811": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "812": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "813": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "maybe_exists%1#0"
      ]
    },
    "814": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "tmp%2#0",
        "user#0"
      ]
    },
    "815": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "amount#0 (copy)"
      ]
    },
    "817": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "818": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "820": {
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "823": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "824": {
      "op": "dup2",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "825": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "826": {
      "op": "assert // Insufficient locked stake",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "827": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "828": {
      "op": "-",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0"
      ]
    },
    "829": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "user#0 (copy)"
      ]
    },
    "831": {
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0"
      ]
    },
    "834": {
      "op": "dup",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "835": {
      "op": "btoi",
      "defined_out": [
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "836": {
      "op": "dig 2",
      "defined_out": [
        "new_locked_stake#0",
        "new_locked_stake#0 (copy)",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%12#0",
        "new_locked_stake#0 (copy)"
      ]
    },
    "838": {
      "op": "-",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0"
      ]
    },
    "839": {
      "op": "dig 3",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0 (copy)"
      ]
    },
    "841": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "842": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0"
      ]
    },
    "843": {
      "op": "dig 4",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "user#0 (copy)"
      ]
    },
    "845": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "846": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "user#0"
      ]
    },
    "848": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "user#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "850": {
      "op": "substring3",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_locked_stake#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0"
      ]
    },
    "851": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0",
        "new_locked_stake#0"
      ]
    },
    "853": {
      "op": "itob",
      "defined_out": [
        "new_available_stake#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "new_available_stake#0",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ]
    },
    "854": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "new_available_stake#0"
      ]
    },
    "856": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "857": {
      "op": "bytec_3 // 0x001a",
      "defined_out": [
        "0x001a",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0x001a"
      ]
    },
    "858": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "0x001a",
        "val_as_bytes%0#0"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "863": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%3#0",
        "tmp%11#0"
      ]
    },
    "865": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%13#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "866": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%13#0"
      ]
    },
    "867": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "868": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0 (copy)"
      ]
    },
    "870": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "871": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "872": {
      "op": "box_put",
      "stack_out": []
    },
    "873": {
      "op": "bytec_2 // \"User \"",
      "defined_out": [
        "\"User \""
      ],
      "stack_out": [
        "\"User \""
      ]
    },
    "874": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"User \"",
        "user_address#0 (copy)"
      ]
    },
    "876": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "877": {
      "op": "pushbytes \" unlocked \"",
      "defined_out": [
        "\" unlocked \"",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "\" unlocked \""
      ]
    },
    "889": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "890": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "amount#0 (copy)"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "893": {
      "op": "log",
      "stack_out": []
    },
    "894": {
      "retsub": true,
      "op": "retsub"
    },
    "895": {
      "subroutine": "smart_contracts.agence_staking.contract.AgenceStaking.slash_stake",
      "params": {
        "offender_address#0": "bytes",
        "amount#0": "bytes",
        "proposer_address#0": "bytes"
      },
      "block": "slash_stake",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "898": {
      "callsub": "smart_contracts.agence_staking.contract.AgenceStaking.only_governance",
      "op": "callsub only_governance",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "901": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x00"
      ]
    },
    "902": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "903": {
      "op": "assert // Only the governance contract can call this method",
      "stack_out": []
    },
    "904": {
      "op": "bytec_1 // 0x75",
      "defined_out": [
        "0x75"
      ],
      "stack_out": [
        "0x75"
      ]
    },
    "905": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x75",
        "offender_address#0 (copy)"
      ],
      "stack_out": [
        "0x75",
        "offender_address#0 (copy)"
      ]
    },
    "907": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "908": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "909": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "910": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "912": {
      "op": "assert // User not found",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "913": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "914": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "maybe_exists%1#0"
      ]
    },
    "915": {
      "op": "assert // check self.users entry exists",
      "stack_out": [
        "tmp%2#0",
        "user#0"
      ]
    },
    "916": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "amount#0 (copy)"
      ]
    },
    "918": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0"
      ]
    },
    "919": {
      "op": "dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "user#0 (copy)"
      ]
    },
    "921": {
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "924": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "925": {
      "op": "dup2",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "926": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "927": {
      "op": "assert // Insufficient locked stake",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "928": {
      "op": "itxn_begin"
    },
    "929": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "931": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "933": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "935": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "proposer_address#0 (copy)",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "proposer_address#0 (copy)"
      ]
    },
    "937": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "939": {
      "op": "intc_1 // pay",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "pay"
      ]
    },
    "940": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "942": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "944": {
      "op": "itxn_submit"
    },
    "945": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0 (copy)"
      ]
    },
    "947": {
      "op": "extract 18 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "950": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%9#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "951": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%4#0 (copy)"
      ]
    },
    "953": {
      "op": "-",
      "defined_out": [
        "new_total_stake#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "tmp%6#0",
        "new_total_stake#0"
      ]
    },
    "954": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "tmp%4#0",
        "new_total_stake#0",
        "tmp%6#0"
      ]
    },
    "955": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "957": {
      "op": "-",
      "defined_out": [
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0"
      ]
    },
    "958": {
      "op": "dup2",
      "defined_out": [
        "new_locked_stake#0",
        "new_locked_stake#0 (copy)",
        "new_total_stake#0",
        "new_total_stake#0 (copy)",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0 (copy)",
        "new_locked_stake#0 (copy)"
      ]
    },
    "959": {
      "op": "-",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0"
      ]
    },
    "960": {
      "op": "dig 3",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "user#0 (copy)"
      ]
    },
    "962": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "user#0 (copy)",
        "0"
      ]
    },
    "963": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "item_start_offset%0#0"
      ]
    },
    "964": {
      "op": "dig 4",
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "user#0 (copy)"
      ]
    },
    "966": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "new_available_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%2#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "967": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "user#0"
      ]
    },
    "969": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "user#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "971": {
      "op": "substring3",
      "defined_out": [
        "new_available_stake#0",
        "new_locked_stake#0",
        "new_total_stake#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_locked_stake#0",
        "new_available_stake#0",
        "tmp%14#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%14#0",
        "new_locked_stake#0"
      ]
    },
    "974": {
      "op": "itob",
      "defined_out": [
        "new_available_stake#0",
        "new_total_stake#0",
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "new_available_stake#0",
        "tmp%14#0",
        "val_as_bytes%0#0"
      ]
    },
    "975": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "new_available_stake#0"
      ]
    },
    "977": {
      "op": "itob",
      "defined_out": [
        "new_total_stake#0",
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_total_stake#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "978": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "new_total_stake#0"
      ]
    },
    "980": {
      "op": "itob",
      "defined_out": [
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "981": {
      "op": "bytec_3 // 0x001a",
      "defined_out": [
        "0x001a",
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a"
      ]
    },
    "982": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0x001a",
        "val_as_bytes%0#0"
      ]
    },
    "984": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "985": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "987": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%14#0",
        "tmp%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "988": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "989": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%14#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "990": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%14#0"
      ]
    },
    "991": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "992": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "tmp%2#0 (copy)"
      ]
    },
    "994": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "{box_del}"
      ]
    },
    "995": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "996": {
      "op": "box_put",
      "stack_out": []
    },
    "997": {
      "op": "pushbytes \"Offender \"",
      "defined_out": [
        "\"Offender \""
      ],
      "stack_out": [
        "\"Offender \""
      ]
    },
    "1008": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"Offender \"",
        "offender_address#0 (copy)"
      ]
    },
    "1010": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1011": {
      "op": "pushbytes \" slashed \"",
      "defined_out": [
        "\" slashed \"",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "\" slashed \""
      ]
    },
    "1022": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1023": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%19#0",
        "amount#0 (copy)"
      ]
    },
    "1025": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1026": {
      "op": "log",
      "stack_out": []
    },
    "1027": {
      "op": "pushbytes \"Proposer \"",
      "defined_out": [
        "\"Proposer \""
      ],
      "stack_out": [
        "\"Proposer \""
      ]
    },
    "1038": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"Proposer \"",
        "proposer_address#0 (copy)"
      ]
    },
    "1040": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1041": {
      "op": "pushbytes \" received \"",
      "defined_out": [
        "\" received \"",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "\" received \""
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1054": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%25#0",
        "amount#0 (copy)"
      ]
    },
    "1056": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1057": {
      "op": "log",
      "stack_out": []
    },
    "1058": {
      "retsub": true,
      "op": "retsub"
    }
  }
}