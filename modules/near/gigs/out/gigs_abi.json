{
  "schema_version": "0.4.0",
  "metadata": {
    "name": "gigs",
    "version": "0.1.0",
    "build": {
      "compiler": "rustc 1.79.0",
      "builder": "cargo-near cargo-near-build 0.1.1"
    },
    "wasm_hash": "E6F1BYWbLRHi2QmhYgho9KA8G1ksTEM4xw9ftQ3hDaqd"
  },
  "body": {
    "functions": [
      {
        "name": "contract_source_metadata",
        "kind": "view"
      },
      {
        "name": "create_gig",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "kind",
              "type_schema": {
                "$ref": "#/definitions/GigKind"
              }
            },
            {
              "name": "agency",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "min_hourly_rate",
              "type_schema": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            {
              "name": "max_hourly_rate",
              "type_schema": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "flag_gig",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "gig_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "reason",
              "type_schema": {
                "$ref": "#/definitions/RejectionReason"
              }
            }
          ]
        }
      },
      {
        "name": "init",
        "kind": "call",
        "modifiers": [
          "init"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "governance_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "start_gig",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "gig_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "ace",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "update_gig_status",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "gig_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "type_schema": {
                "$ref": "#/definitions/GigStatus"
              }
            }
          ]
        }
      }
    ],
    "root_schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string",
      "definitions": {
        "AccountId": {
          "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
          "type": "string"
        },
        "GigKind": {
          "type": "string",
          "enum": [
            "FullTime",
            "PartTime",
            "Contract"
          ]
        },
        "GigStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Pending",
                "Active",
                "Completed",
                "Expired",
                "Canceled"
              ]
            },
            {
              "type": "object",
              "required": [
                "Rejected"
              ],
              "properties": {
                "Rejected": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "$ref": "#/definitions/RejectionReason"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RejectionReason": {
          "type": "string",
          "enum": [
            "Scam",
            "Sham",
            "Spam"
          ]
        }
      }
    }
  }
}